# /etc/init/unicorn.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/unicorn.conf then mange unicorn with:
#   sudo start unicorn index=0
#   sudo stop unicorn index=0
#   sudo status unicorn index=0
#
# or use the service command:
#   sudo service unicorn {start,stop,restart,status}
#

description "FindsYouBuyers Unicorn Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping workers or runlevel [06])

# change to match your deployment user
setuid deploy
setgid deploy

respawn
respawn limit 3 30

# TERM is sent by unicornctl when stopping unicorn.  Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM

script
# this script runs in /bin/sh by default
# respawn as bash so we will get rvm from our bashrc
exec /home/deploy/.rvm/bin/rvm-shell <<EOT
  # use syslog for logging
  exec &> /dev/kmsg

  # pull in system rbenv
  export HOME=/home/deploy

  cd /var/www/rails/findsyoubuyers/current
  # Bootup unicorn created with rvm wrapper 2.0.0-p247@findsyou bootup unicorn - change if ruby changes
  exec bin/unicorn -c /var/www/rails/findsyoubuyers/current/config/unicorn.rb -E production -D
EOT
end script
#Ruby options:
#  -e, --eval LINE          evaluate a LINE of code
#  -d, --debug              set debugging flags (set $DEBUG to true)
#  -w, --warn               turn warnings on for your script
#  -I, --include PATH       specify $LOAD_PATH (may be used more than once)
#  -r, --require LIBRARY    require the library, before executing your script
#unicorn_rails options:
#  -o, --host HOST          listen on HOST (default: 0.0.0.0)
#  -p, --port PORT          use PORT (default: 8080)
#  -E, --env RAILS_ENV      use RAILS_ENV for defaults (default: development)
#  -D, --daemonize          run daemonized in the background
#  -l {HOST:PORT|PATH},     listen on HOST:PORT or PATH
#      --listen             this may be specified multiple times
#                           (default: 0.0.0.0:8080)
#  -c, --config-file FILE   Unicorn-specific config file
#
#      --path PATH          Runs Rails app mounted at a specific path.
#                           (default: /)
